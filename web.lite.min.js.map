{"version":3,"sources":["../src/tag.js","../src/lifecycle.js"],"names":["DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","replace","range","document","createRange","setStartBefore","setEndAfter","extractContents","removeRef","insertNode","replaceAttr","m","t","l","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","out","fragment","createContextualFragment","forEach","toReplace","querySelector","o","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","name","render","maybeCall","fn","_this","call","didAttach","performRender","willRender","lemnPrivateAttr","v","includes","willDetach","component","didRender","root","appendChild","Promise","resolve","then"],"mappings":"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","sourcesContent":["const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  const out = exprs.map((expr, i) => (\n    (typeof expr === 'object' || typeof expr === 'function') ?\n      `<link class=${BIND_PREFIX}${i}>` :\n      expr\n  )).join('') || ' ';\n\n  const fragment = document.createRange().createContextualFragment(out);\n\n  exprs.forEach((expr, i) => {\n    if (typeof expr === 'object' || typeof expr === 'function') {\n      const toReplace = fragment.querySelector(`.${BIND_PREFIX}${i}`);\n      if (toReplace) {\n        if (!expr.nodeType) {\n          expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n          fragment.lemnPrivateComponents = [...(fragment.lemnPrivateComponents || []), expr];\n        } else {\n          replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr);\n        }\n      } else {\n        Array.from(fragment.querySelectorAll('*')).some(el => {\n          return Array.from(el.attributes).some(attr => {\n            if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n              const attrName = attr.name === 'class' ? 'className' : attr.name;\n              if (expr.render) {\n                expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                fragment.lemnPrivateComponents = [...(fragment.lemnPrivateComponents || []), expr];\n              } else {\n                replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n              }\n              return true;\n            }\n          });\n        });\n      }\n    }\n  });\n\n  return fragment;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n      if (!fragment.lemnRef) {\n        (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n        (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n        (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n        expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n        replace(expr.lemnRef, fragment);\n        fragment.lemnRef = expr.lemnRef;\n      }\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(h`${expr}`);\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n"]}