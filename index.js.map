{"version":3,"sources":["webpack:///cheap bootstrap","webpack:///../src/tag.js","webpack:///../src/lifecycle.js","webpack:///./index.js"],"names":["__webpack_require__","[object Object]","exports","name","getter","factory","call","key","DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","removeRef","range","document","createRange","setStartBefore","setEndAfter","extractContents","replace","insertNode","replaceAttr","s","t","l","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","template","defineProperty","out","createContextualFragment","content","cloneNode","forEach","toReplace","querySelector","o","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","render","toFragment","maybeCall","fn","_this","willDetach","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","component","didRender","index_List","items","this","item","index_LinkList","url","text","root","filter","file","version","appendChild"],"mappings":"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","file":"index.js","sourcesContent":["const __webpack_require__ = {r () {}, d (exports, name, getter) {exports[name] = getter;}};\nconst exports = {};\nfactory.call(exports, null, exports, __webpack_require__);\nfor (const key in exports) {exports[key] = exports[key]();}\nreturn exports;","const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let template;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!template) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        template = document.createRange().createContextualFragment(out);\n      }\n\n      const content = template.cloneNode(true);\n\n      exprs.forEach((expr, i) => {\n        if (typeof expr === 'object' || typeof expr === 'function') {\n          const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n          if (toReplace) {\n            if (!expr.nodeType) {\n              expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n              content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n            } else {\n              replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr);\n            }\n          } else {\n            Array.from(content.querySelectorAll('*')).some(el => {\n              return Array.from(el.attributes).some(attr => {\n                if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                  const attrName = attr.name === 'class' ? 'className' : attr.name;\n                  if (expr.render) {\n                    expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                    content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                  } else {\n                    replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                  }\n                  return true;\n                }\n              });\n            });\n          }\n        }\n      });\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n\n      (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n      (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n      (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n      expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n      replace(expr.lemnRef, fragment);\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n","import {h, attach} from '../index';\n\nclass List {\n  constructor (items) {\n    this.items = items;\n  }\n\n  render () {\n    const {items} = this;\n    return h`\n      <table><tbody>\n      ${items.map(item => h`\n        <tr><td style=\"padding-top: 0; padding-bottom: 0\">\n          ${item}\n        </td></tr>\n      `)}\n      </tbody></table>\n    `;\n  }\n}\n\nclass LinkList {\n  constructor (items) {\n    this.items = items;\n  }\n\n  render () {\n    return new List(this.items.map(item => (\n      h`<a href=\"${item.url}\"><div style=\"padding: 1.2rem 0\">\n        ${item.text}\n      </div></a>`\n    )));\n  }\n}\n\nclass App {\n  render () {\n    return h`\n      <section class=\"container\">\n      <h1>lem(o)n</h1>\n      </section>\n\n      <section class=\"container\">\n      <h2>Documentation</h2>\n      ${new LinkList([{url: 'docs', text: 'API'}])}\n      </section>\n\n      <section class=\"container\" style=\"margin-top: 2em\">\n      <h2>Examples</h2>\n      ${new LinkList(\n        (typeof FILES === 'undefined' ? ['clock'] : FILES)\n        .filter(file => file !== 'index')\n        .map(file => ({url: `examples/${file}.html`, text: file}))\n      )}\n      </section>\n\n      <section class=\"container\" style=\"margin-top: 2em\">\n      <h2>Versions</h2>\n      ${\n        (typeof VERSIONS === 'undefined' ? ['0.3.1'] : VERSIONS)\n        .map(version => h`\n          <details>\n          <summary>${version}</summary>\n          ${new LinkList([\n            'lemn', 'lemn.lite', 'lemn.min', 'lemn.lite.min'\n          ].map(file => ({url: `${version}/${file}.js`, text: `${file}.js`})))}\n          </details>\n        `)\n      }\n      </section>\n    `;\n  }\n}\n\nattach(document.querySelector('.root'), new App());\n"],"sourceRoot":""}