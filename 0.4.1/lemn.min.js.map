{"version":3,"sources":["../src/tag.js","../src/lifecycle.js","../src/bond.js","../src/model.js","../src/store.js"],"names":["DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","removeRef","range","document","createRange","setStartBefore","setEndAfter","extractContents","replace","insertNode","replaceAttr","o","t","u","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","template","defineProperty","[object Object]","out","createContextualFragment","content","cloneNode","forEach","toReplace","querySelector","s","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","name","render","toFragment","maybeCall","fn","_this","call","willDetach","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","component","didRender","rerender","Promise","resolve","then","Bond","parent","this","lemnPrivateFn","data","child","lemnPrivateActiveChildren","filter","c","length","unbind","bind","push","Model","super","n","root","appendChild","lemnData","entries","args","set","id","lemnPrivateData"],"mappings":"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","sourcesContent":["const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let template;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!template) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        template = document.createRange().createContextualFragment(out);\n      }\n\n      const content = template.cloneNode(true);\n\n      exprs.forEach((expr, i) => {\n        if (typeof expr === 'object' || typeof expr === 'function') {\n          const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n          if (toReplace) {\n            if (!expr.nodeType) {\n              expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n              content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n            } else {\n              replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr);\n            }\n          } else {\n            Array.from(content.querySelectorAll('*')).some(el => {\n              return Array.from(el.attributes).some(attr => {\n                if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                  const attrName = attr.name === 'class' ? 'className' : attr.name;\n                  if (expr.render) {\n                    expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                    content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                  } else {\n                    replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                  }\n                  return true;\n                }\n              });\n            });\n          }\n        }\n      });\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n\n      (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n      (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n      (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n      expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n      replace(expr.lemnRef, fragment);\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n","import {rerender} from './lifecycle';\n\n/**\n * A function bonded a Model or other Bond parent. Changes are pushed from\n * parent to child. Using a Bond in a `h` tagged template string will\n * automatically rerender when its function returns a new value from its parent\n * Model or Bond.\n */\nclass Bond {\n  constructor (parent, fn) {\n    this.parent = parent;\n    this.lemnPrivateFn = fn;\n    this.data = this.lemnPrivateFn(this.parent.data, this.data);\n  }\n\n  unbind (child) {\n    if ((this.lemnPrivateActiveChildren = (this.lemnPrivateActiveChildren || []).filter(c => c !== child)).length === 0) {\n      this.parent.unbind(this);\n    }\n  }\n\n  bind (child) {\n    if ((this.lemnPrivateActiveChildren = [...(this.lemnPrivateActiveChildren || []), child]).length === 1) {\n      this.parent.bind(this);\n      this.data = this.lemnPrivateFn(this.parent.data, this.data);\n    }\n  }\n\n  push () {\n    if (this.data !== (this.data = this.lemnPrivateFn(this.parent.data, this.data))) {\n      (this.lemnPrivateActiveChildren || []).forEach(child => child.push());\n      if (this.lemnRef) {\n        rerender(this);\n      }\n    }\n  }\n\n  as (fn) {\n    return new Bond(this, fn);\n  }\n\n  willDetach () {\n    this.parent.unbind(this);\n  }\n\n  didAttach () {\n    this.parent.bind(this);\n  }\n\n  render () {\n    return this.data;\n  }\n}\n\nexport {\n  Bond,\n};\n","import {Bond} from './bond';\n\n/** A data model that pushes changes to bonded functions. */\nclass Model extends Bond {\n  constructor (data = {}) {\n    super({\n      bind () {},\n      unbind () {},\n      data\n    }, n => n);\n  }\n\n  set (data) {\n    this.parent.data = data;\n    this.push();\n  }\n\n  toJSON () {\n    return this.data;\n  }\n}\n\nexport {\n  Model,\n};\n","import {Model} from './model';\n\n/** A store for multiple Models to utilize them in multiple components. */\nclass Store {\n  constructor (lemnData = {}) {\n    Object.entries(lemnData).forEach(args => this.set(...args));\n  }\n\n  model (id) {\n    return ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model());\n  }\n\n  get (id) {\n    return ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model()).data;\n  }\n\n  set (id, lemnData) {\n    ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model()).set(lemnData);\n  }\n\n  remove (id) {\n    delete this.lemnPrivateData[id];\n  }\n\n  toJSON () {\n    return this.lemnPrivateData;\n  }\n}\n\nexport {\n  Store,\n};\n"]}