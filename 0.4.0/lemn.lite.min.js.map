{"version":3,"sources":["../src/tag.js","../src/lifecycle.js"],"names":["DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","replace","range","document","createRange","setStartBefore","setEndAfter","extractContents","removeRef","insertNode","replaceAttr","l","t","m","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","content","defineProperty","[object Object]","out","createContextualFragment","forEach","toReplace","querySelector","o","cloneNode","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","name","render","toFragment","maybeCall","fn","_this","call","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","willDetach","component","didRender","root","appendChild","Promise","resolve","then"],"mappings":"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","sourcesContent":["const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let content;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!content) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        content = document.createRange().createContextualFragment(out);\n\n        exprs.forEach((expr, i) => {\n          if (typeof expr === 'object' || typeof expr === 'function') {\n            const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n            if (toReplace) {\n              if (!expr.nodeType) {\n                expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n                content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n              } else {\n                replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr.cloneNode(true));\n              }\n            } else {\n              Array.from(content.querySelectorAll('*')).some(el => {\n                return Array.from(el.attributes).some(attr => {\n                  if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                    const attrName = attr.name === 'class' ? 'className' : attr.name;\n                    if (expr.render) {\n                      expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                      content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                    } else {\n                      replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                    }\n                    return true;\n                  }\n                });\n              });\n            }\n          }\n        });\n      }\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n      if (!fragment.lemnRef) {\n        (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n        (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n        (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n        expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n        replace(expr.lemnRef, fragment.cloneNode(true));\n        fragment.lemnRef = expr.lemnRef;\n      }\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n"]}