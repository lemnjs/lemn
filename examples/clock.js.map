{"version":3,"sources":["webpack:///cheap bootstrap","webpack:///../src/tag.js","webpack:///../src/lifecycle.js","webpack:///../src/bond.js","webpack:///../src/model.js","webpack:///./clock.js"],"names":["__webpack_require__","[object Object]","exports","name","getter","factory","call","key","DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","removeRef","range","document","createRange","setStartBefore","setEndAfter","extractContents","replace","insertNode","replaceAttr","o","t","l","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","template","defineProperty","out","createContextualFragment","content","cloneNode","forEach","toReplace","querySelector","s","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","render","toFragment","maybeCall","fn","_this","willDetach","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","component","didRender","bond_Bond","parent","this","lemnPrivateFn","data","child","lemnPrivateActiveChildren","filter","c","length","unbind","bind","push","Promise","resolve","then","model_Model","super","n","time","Date","setInterval","set","root","model","as","d","toString","padStart","maxWidth","alignItems","display","height","fontSize","fontFamily","textAlign","width","pad","getHours","getMinutes","getSeconds","getMilliseconds","appendChild"],"mappings":"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","file":"clock.js","sourcesContent":["const __webpack_require__ = {r () {}, d (exports, name, getter) {exports[name] = getter;}};\nconst exports = {};\nfactory.call(exports, null, exports, __webpack_require__);\nfor (const key in exports) {exports[key] = exports[key]();}\nreturn exports;","const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let template;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!template) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        template = document.createRange().createContextualFragment(out);\n      }\n\n      const content = template.cloneNode(true);\n\n      exprs.forEach((expr, i) => {\n        if (typeof expr === 'object' || typeof expr === 'function') {\n          const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n          if (toReplace) {\n            if (!expr.nodeType) {\n              expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n              content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n            } else {\n              replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr);\n            }\n          } else {\n            Array.from(content.querySelectorAll('*')).some(el => {\n              return Array.from(el.attributes).some(attr => {\n                if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                  const attrName = attr.name === 'class' ? 'className' : attr.name;\n                  if (expr.render) {\n                    expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                    content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                  } else {\n                    replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                  }\n                  return true;\n                }\n              });\n            });\n          }\n        }\n      });\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n\n      (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n      (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n      (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n      expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n      replace(expr.lemnRef, fragment);\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n","import {rerender} from './lifecycle';\n\n/**\n * A function bonded a Model or other Bond parent. Changes are pushed from\n * parent to child. Using a Bond in a `h` tagged template string will\n * automatically rerender when its function returns a new value from its parent\n * Model or Bond.\n */\nclass Bond {\n  constructor (parent, fn) {\n    this.parent = parent;\n    this.lemnPrivateFn = fn;\n    this.data = this.lemnPrivateFn(this.parent.data, this.data);\n  }\n\n  unbind (child) {\n    if ((this.lemnPrivateActiveChildren = (this.lemnPrivateActiveChildren || []).filter(c => c !== child)).length === 0) {\n      this.parent.unbind(this);\n    }\n  }\n\n  bind (child) {\n    if ((this.lemnPrivateActiveChildren = [...(this.lemnPrivateActiveChildren || []), child]).length === 1) {\n      this.parent.bind(this);\n      this.data = this.lemnPrivateFn(this.parent.data, this.data);\n    }\n  }\n\n  push () {\n    if (this.data !== (this.data = this.lemnPrivateFn(this.parent.data, this.data))) {\n      (this.lemnPrivateActiveChildren || []).forEach(child => child.push());\n      if (this.lemnRef) {\n        rerender(this);\n      }\n    }\n  }\n\n  as (fn) {\n    return new Bond(this, fn);\n  }\n\n  willDetach () {\n    this.parent.unbind(this);\n  }\n\n  didAttach () {\n    this.parent.bind(this);\n  }\n\n  render () {\n    return this.data;\n  }\n}\n\nexport {\n  Bond,\n};\n","import {Bond} from './bond';\n\n/** A data model that pushes changes to bonded functions. */\nclass Model extends Bond {\n  constructor (data = {}) {\n    super({\n      bind () {},\n      unbind () {},\n      data\n    }, n => n);\n  }\n\n  set (data) {\n    this.parent.data = data;\n    this.push();\n  }\n\n  toJSON () {\n    return this.data;\n  }\n}\n\nexport {\n  Model,\n};\n","import {h, attach, Model} from '../index';\n\nconst time = new Model(new Date());\nsetInterval(() => time.set(new Date()), 87);\n\nclass Clock {\n  constructor (model) {\n    this.model = model;\n  }\n\n  pad (n, fn) {\n    return this.model.as(fn).as(d => d.toString().padStart(n, '0'));\n  }\n\n  render () {\n    return h`\n    <section class=\"container\" style=\"${{\n      maxWidth: '20em',\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n    }}\">\n    <div style=\"${{\n      fontSize: '2em',\n      fontFamily: 'monospace',\n      textAlign: 'center',\n      width: '100%',\n    }}\">\n      <div class=\"row\">\n        <div class=\"column\">${this.pad(2, d => d.getHours())}</div>\n        <div>:</div>\n        <div class=\"column\">${this.pad(2, d => d.getMinutes())}</div>\n        <div>:</div>\n        <div class=\"column\">${this.pad(2, d => d.getSeconds())}</div>\n        <div>.</div>\n        <div class=\"column\">${this.pad(3, d => d.getMilliseconds())}</div>\n      </div>\n    </div>\n    </section>\n    `;\n  }\n}\n\nattach(document.querySelector('.root'), new Clock(time));\n"],"sourceRoot":""}