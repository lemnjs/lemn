{"version":3,"sources":["webpack:///cheap bootstrap","webpack:///../src/tag.js","webpack:///../src/lifecycle.js","webpack:///../src/bond.js","webpack:///../src/model.js","webpack:///./helloworld.js"],"names":["__webpack_require__","[object Object]","exports","name","getter","factory","call","key","DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","removeRef","range","document","createRange","setStartBefore","setEndAfter","extractContents","replace","insertNode","replaceAttr","o","h","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","strings","_exprs","exprs","map","expr","i","template","defineProperty","out","createContextualFragment","content","cloneNode","forEach","toReplace","querySelector","t","s","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","render","toFragment","maybeCall","fn","_this","willDetach","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","component","didRender","Bond","parent","this","lemnPrivateFn","data","child","lemnPrivateActiveChildren","filter","c","length","unbind","bind","push","Promise","resolve","then","Model","super","n","encode","toString","helloworld_TextInput","options","placeholder","model","ev","set","currentTarget","root","appendChild","d","b","as"],"mappings":"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","file":"helloworld.js","sourcesContent":["const __webpack_require__ = {r () {}, d (exports, name, getter) {exports[name] = getter;}};\nconst exports = {};\nfactory.call(exports, null, exports, __webpack_require__);\nfor (const key in exports) {exports[key] = exports[key]();}\nreturn exports;","const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let template;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!template) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        template = document.createRange().createContextualFragment(out);\n      }\n\n      const content = template.cloneNode(true);\n\n      exprs.forEach((expr, i) => {\n        if (typeof expr === 'object' || typeof expr === 'function') {\n          const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n          if (toReplace) {\n            if (!expr.nodeType) {\n              expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n              content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n            } else {\n              replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr);\n            }\n          } else {\n            Array.from(content.querySelectorAll('*')).some(el => {\n              return Array.from(el.attributes).some(attr => {\n                if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                  const attrName = attr.name === 'class' ? 'className' : attr.name;\n                  if (expr.render) {\n                    expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                    content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                  } else {\n                    replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                  }\n                  return true;\n                }\n              });\n            });\n          }\n        }\n      });\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n\n      (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n      (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n      (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n      expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n      replace(expr.lemnRef, fragment);\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n","import {rerender} from './lifecycle';\n\n/**\n * A function bonded a Model or other Bond parent. Changes are pushed from\n * parent to child. Using a Bond in a `h` tagged template string will\n * automatically rerender when its function returns a new value from its parent\n * Model or Bond.\n */\nclass Bond {\n  constructor (parent, fn) {\n    this.parent = parent;\n    this.lemnPrivateFn = fn;\n    this.data = this.lemnPrivateFn(this.parent.data, this.data);\n  }\n\n  unbind (child) {\n    if ((this.lemnPrivateActiveChildren = (this.lemnPrivateActiveChildren || []).filter(c => c !== child)).length === 0) {\n      this.parent.unbind(this);\n    }\n  }\n\n  bind (child) {\n    if ((this.lemnPrivateActiveChildren = [...(this.lemnPrivateActiveChildren || []), child]).length === 1) {\n      this.parent.bind(this);\n      this.data = this.lemnPrivateFn(this.parent.data, this.data);\n    }\n  }\n\n  push () {\n    if (this.data !== (this.data = this.lemnPrivateFn(this.parent.data, this.data))) {\n      (this.lemnPrivateActiveChildren || []).forEach(child => child.push());\n      if (this.lemnRef) {\n        rerender(this);\n      }\n    }\n  }\n\n  as (fn) {\n    return new Bond(this, fn);\n  }\n\n  willDetach () {\n    this.parent.unbind(this);\n  }\n\n  didAttach () {\n    this.parent.bind(this);\n  }\n\n  render () {\n    return this.data;\n  }\n}\n\nexport {\n  Bond,\n};\n","import {Bond} from './bond';\n\n/** A data model that pushes changes to bonded functions. */\nclass Model extends Bond {\n  constructor (data = {}) {\n    super({\n      bind () {},\n      unbind () {},\n      data\n    }, n => n);\n  }\n\n  set (data) {\n    this.parent.data = data;\n    this.push();\n  }\n\n  toJSON () {\n    return this.data;\n  }\n}\n\nexport {\n  Model,\n};\n","import {Component, h, attach, Model} from '..';\n\nfunction encode(s) {\n  return s.toString().replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nclass TextInput {\n  constructor (options = {}) {\n    this.options = options;\n  }\n\n  render () {\n    const {name, placeholder, model} = this.options;\n    return h`<input type=\"text\"\n      name=\"${name}\"\n      placeholder=\"${placeholder}\"\n      value=\"${model.data}\"\n      onkeyup=\"${ev => model.set(ev.currentTarget.value)}\">`;\n  }\n}\n\nclass App {\n  constructor () {\n    this.name = new Model('');\n  }\n\n  render () {\n    return h`\n      <section class=\"container\" style=\"margin-top: 2em\">\n      ${new TextInput({placeholder: 'world', model: this.name})}\n      <div>hello ${this.name.as(i => i || 'world').as(encode)}</div>\n      </section>\n    `;\n  }\n}\n\nattach(document.querySelector('.root'), new App);\n"],"sourceRoot":""}