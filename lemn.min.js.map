{"version":3,"sources":["../src/tag.js","../src/lifecycle.js","../src/bond.js","../src/model.js","../src/store.js"],"names":["DOCUMENT_FRAGMENT_NODE","setRefRange","refRange","replaceWith","firstChild","lastChild","nodeType","startEndNodes","lemnRef","lemnPrivateStart","lemnPrivateDom","lemnEndRef","lemnPrivateEnd","removeRef","range","document","createRange","setStartBefore","setEndAfter","extractContents","replace","insertNode","replaceAttr","o","t","u","lemnPrivateName","removeAttribute","Array","isArray","join","Object","assign","flatten","array","some","concat","BIND_PREFIX","h","strings","_exprs","exprs","map","expr","i","content","defineProperty","[object Object]","out","createContextualFragment","forEach","toReplace","querySelector","s","cloneNode","lemnPrivateComponents","from","querySelectorAll","el","attributes","attr","value","attrName","name","render","toFragment","maybeCall","fn","_this","call","willDetach","didAttach","performRender","willRender","lemnPrivateAttr","fragment","v","includes","component","didRender","rerender","Promise","resolve","then","Bond","parent","this","lemnPrivateFn","data","child","lemnPrivateActiveChildren","filter","c","length","unbind","bind","push","Model","super","n","root","appendChild","lemnData","entries","args","set","id","lemnPrivateData"],"mappings":"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","sourcesContent":["const DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction startEndNodes (replaceWith) {\n  if (replaceWith.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    return replaceWith;\n  }\n  return {firstChild: replaceWith, lastChild: replaceWith};\n}\n\nfunction setRefRange (refRange, replaceWith) {\n  const {firstChild, lastChild} = startEndNodes(replaceWith);\n\n  (firstChild.lemnRef = (refRange.lemnPrivateStart = (firstChild.lemnRef || refRange.lemnPrivateStart))).lemnPrivateDom = firstChild;\n  (lastChild.lemnEndRef = (refRange.lemnPrivateEnd = (lastChild.lemnEndRef || refRange.lemnPrivateEnd))).lemnPrivateDom = lastChild;\n}\n\nfunction removeRef (refRange) {\n  const range = document.createRange();\n  range.setStartBefore(refRange.lemnPrivateStart.lemnPrivateDom);\n  range.setEndAfter(refRange.lemnPrivateEnd.lemnPrivateDom);\n  range.extractContents();\n  return range;\n}\n\nfunction replace (refRange, replaceWith) {\n  const range = removeRef(refRange);\n  setRefRange(refRange, replaceWith);\n  range.insertNode(replaceWith);\n}\n\n/**\n * @private\n * @param {object|function|string|number|boolean} replaceWith\n */\nfunction replaceAttr ({lemnPrivateAttr: {lemnPrivateDom, lemnPrivateName}}, replaceWith) {\n  lemnPrivateDom.removeAttribute(lemnPrivateName);\n  if (Array.isArray(replaceWith)) {\n    lemnPrivateDom[lemnPrivateName] = replaceWith.join(' ');\n  } else if (typeof replaceWith === 'object') {\n    Object.assign(lemnPrivateDom[lemnPrivateName], replaceWith);\n  } else {\n    lemnPrivateDom[lemnPrivateName] = replaceWith;\n  }\n}\n\nfunction flatten (array) {\n  if (array.some(Array.isArray)) {\n    return flatten([].concat(...array));\n  }\n  return array;\n}\n\nconst BIND_PREFIX = 'lemn';\n\n/**\n * A template string tag that turns the strings and input objects into lemnPrivateDom\n * elements.\n *\n * @param {Array.<string>} strings\n * @param {Array} ...exprs\n *\n * @example\n * h`<div></div>`\n *\n * @example\n * h`<div style=\"${{fontSize: '2em'}}\">Big Text</div>`\n *\n * @example\n * h`<div onclick=\"${ev => console.log('clicked!')}\">Click Me</div>`\n *\n * @example\n * h`<div>${{render() {return h`output`;}}}</div>`\n *\n * @example\n * h`<div>${new MyComponent()}</div>`\n */\nfunction h (strings, ..._exprs) {\n  const exprs = [strings[0], ...flatten(_exprs.map((expr, i) => [expr, strings[i + 1]]))];\n\n  let content;\n  Object.defineProperty(exprs, 'content', {\n    get () {\n      if (!content) {\n        const out = exprs.map((expr, i) => (\n          (typeof expr === 'object' || typeof expr === 'function') ?\n            `<link class=${BIND_PREFIX}${i}>` :\n            expr\n        )).join('') || ' ';\n\n        content = document.createRange().createContextualFragment(out);\n\n        exprs.forEach((expr, i) => {\n          if (typeof expr === 'object' || typeof expr === 'function') {\n            const toReplace = content.querySelector(`.${BIND_PREFIX}${i}`);\n            if (toReplace) {\n              if (!expr.nodeType) {\n                expr.lemnRef = {...expr.lemnRef, lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}};\n                content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n              } else {\n                replace({lemnPrivateStart: {lemnPrivateDom: toReplace}, lemnPrivateEnd: {lemnPrivateDom: toReplace}}, expr.cloneNode(true));\n              }\n            } else {\n              Array.from(content.querySelectorAll('*')).some(el => {\n                return Array.from(el.attributes).some(attr => {\n                  if (attr.value === `<link class=${BIND_PREFIX}${i}>`) {\n                    const attrName = attr.name === 'class' ? 'className' : attr.name;\n                    if (expr.render) {\n                      expr.lemnRef = {lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}};\n                      content.lemnPrivateComponents = [...(content.lemnPrivateComponents || []), expr];\n                    } else {\n                      replaceAttr({lemnPrivateAttr: {lemnPrivateDom: el, lemnPrivateName: attrName}}, expr);\n                    }\n                    return true;\n                  }\n                });\n              });\n            }\n          }\n        });\n      }\n\n      return content;\n    }\n  });\n\n  return exprs;\n}\n\nexport {\n  setRefRange,\n  removeRef,\n  replace,\n  replaceAttr,\n  flatten,\n  h,\n  BIND_PREFIX,\n};\n","import {removeRef, replace, replaceAttr, h} from './tag';\n\nfunction toFragment (replaceWith) {\n    if (replaceWith.nodeType) {\n        return replaceWith;\n    }\n    return h`${replaceWith}`.content;\n}\n\nfunction maybeCall (fn, _this) {\n    fn && fn.call(_this);\n}\n\nfunction willDetach (expr) {\n    maybeCall(expr.willDetach, expr);\n}\n\nfunction didAttach (expr) {\n    maybeCall(expr.didAttach, expr);\n}\n\nfunction performRender (expr) {\n    maybeCall(expr.willRender, expr);\n\n    if (expr.lemnRef.lemnPrivateAttr) {\n      replaceAttr(expr.lemnRef, expr.render() || '');\n    } else {\n      const fragment = toFragment(expr.render() || ' ');\n      if (!fragment.lemnRef) {\n        (expr.lemnRef.lemnPrivateComponents || []).forEach(v => !(fragment.lemnPrivateComponents || []).includes(v) && willDetach(v));\n        (fragment.lemnPrivateComponents || []).forEach(component => performRender(component));\n        (fragment.lemnPrivateComponents || []).forEach(v => !(expr.lemnRef.lemnPrivateComponents || []).includes(v) && didAttach(v));\n        expr.lemnRef.lemnPrivateComponents = (fragment.lemnPrivateComponents || []);\n\n        replace(expr.lemnRef, fragment.cloneNode(true));\n        fragment.lemnRef = expr.lemnRef;\n      }\n    }\n\n    maybeCall(expr.didRender, expr);\n}\n\n/**\n * Queue to call a component's render method later and inject its returned\n * value into the dom.\n *\n * @param {Component} component - rerender this component soon\n */\nfunction rerender (expr) {\n    return Promise.resolve(expr).then(performRender);\n}\n\n/**\n * Attach a component into some root node.\n *\n * @param {HTMLElement} root - html element to attach component under\n * @param {Component} component - component to render\n */\nfunction attach(root, expr) {\n    root.appendChild(toFragment(expr));\n    performRender(expr);\n    didAttach(expr);\n}\n\n/**\n * Detach a component from the dom.\n *\n * @param {Component} component - component to detach from parent dom\n */\nfunction detach(expr) {\n    willDetach(expr);\n    removeRef(expr.lemnRef);\n}\n\nexport {\n    toFragment,\n    maybeCall,\n    performRender,\n    rerender,\n    attach,\n    detach,\n};\n","import {rerender} from './lifecycle';\n\n/**\n * A function bonded a Model or other Bond parent. Changes are pushed from\n * parent to child. Using a Bond in a `h` tagged template string will\n * automatically rerender when its function returns a new value from its parent\n * Model or Bond.\n */\nclass Bond {\n  constructor (parent, fn) {\n    this.parent = parent;\n    this.lemnPrivateFn = fn;\n    this.data = this.lemnPrivateFn(this.parent.data, this.data);\n  }\n\n  unbind (child) {\n    if ((this.lemnPrivateActiveChildren = (this.lemnPrivateActiveChildren || []).filter(c => c !== child)).length === 0) {\n      this.parent.unbind(this);\n    }\n  }\n\n  bind (child) {\n    if ((this.lemnPrivateActiveChildren = [...(this.lemnPrivateActiveChildren || []), child]).length === 1) {\n      this.parent.bind(this);\n      this.data = this.lemnPrivateFn(this.parent.data, this.data);\n    }\n  }\n\n  push () {\n    if (this.data !== (this.data = this.lemnPrivateFn(this.parent.data, this.data))) {\n      (this.lemnPrivateActiveChildren || []).forEach(child => child.push());\n      if (this.lemnRef) {\n        rerender(this);\n      }\n    }\n  }\n\n  as (fn) {\n    return new Bond(this, fn);\n  }\n\n  willDetach () {\n    this.parent.unbind(this);\n  }\n\n  didAttach () {\n    this.parent.bind(this);\n  }\n\n  render () {\n    return this.data;\n  }\n}\n\nexport {\n  Bond,\n};\n","import {Bond} from './bond';\n\n/** A data model that pushes changes to bonded functions. */\nclass Model extends Bond {\n  constructor (data = {}) {\n    super({\n      bind () {},\n      unbind () {},\n      data\n    }, n => n);\n  }\n\n  set (data) {\n    this.parent.data = data;\n    this.push();\n  }\n\n  toJSON () {\n    return this.data;\n  }\n}\n\nexport {\n  Model,\n};\n","import {Model} from './model';\n\n/** A store for multiple Models to utilize them in multiple components. */\nclass Store {\n  constructor (lemnData = {}) {\n    Object.entries(lemnData).forEach(args => this.set(...args));\n  }\n\n  model (id) {\n    return ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model());\n  }\n\n  get (id) {\n    return ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model()).data;\n  }\n\n  set (id, lemnData) {\n    ((this.lemnPrivateData = this.lemnPrivateData || {})[id] = this.lemnPrivateData[id] || new Model()).set(lemnData);\n  }\n\n  remove (id) {\n    delete this.lemnPrivateData[id];\n  }\n\n  toJSON () {\n    return this.lemnPrivateData;\n  }\n}\n\nexport {\n  Store,\n};\n"]}